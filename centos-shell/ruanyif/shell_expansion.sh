#1.简介
#Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。

#这种特殊字符的扩展，称为模式扩展（globbing）。其中有些用到通配符，又称为通配符扩展（wildcard expansion）。Bash 一共提供八种扩展。
#~ 波浪线扩展
#? 字符扩展
#* 字符扩展
#[] 方括号扩展
#{} 大括号扩展
# 变量扩展
# 子命令扩展
# 算术扩展

#Bash 允许用户关闭扩展
# set -o noglob
# 或者
# set -f

#下面的命令可以重新打开扩展
# set +o noglob
# 或者
# set +f

#2.波浪线扩展
#波浪线~会自动扩展成当前用户的主目录
#cd ~
#ls ~root

#~+会扩展成当前所在的目录，等同于pwd命令
#cd ~/code
#echo ~+
# like as
#pwd

#3.? 字符扩展
#? 字符代表文件路径里面的任意单个字符，不包括空字符。比如，Data???匹配所有Data后面跟着三个字符的文件名
#? 字符扩展属于文件名扩展，只有文件确实存在的前提下，才会发生扩展。如果文件不存在，扩展就不会发生
#echo ?.txt

#4.* 字符扩展
#*字符代表文件路径里面的任意数量的任意字符，包括零个字符
#ls *.txt

#输出cd ./xxx目录的信息
#ls *

#输出.以及..目录的信息
#ls .*

#*只匹配当前目录，不会匹配子目录
# 子目录有一个 a.txt
# 无效的写法
# ls *.txt

# 有效的写法
# ls */*.txt

##文本文件在子目录，*.txt不会产生匹配，必须写成*/*.txt。有几层子目录，就必须写几层星号。

#Bash 4.0 引入了一个参数globstar，当该参数打开时，允许**匹配零个或多个子目录。因此，**/*.txt可以匹配顶层的文本文件和任意深度子目录的文本文件

#5.方括号扩展
#方括号扩展的形式是[...]，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，[aeiou]可以匹配五个元音字母中的任意一个
#方括号扩展还有两种变体：[^...]和[!...]。它们表示匹配不在方括号里面的字符，这两种写法是等价的。比如，[^abc]或[!abc]表示匹配除了a、b、c以外的字符。
# 存在 aaa、bbb、aba 三个文件
# ls ?[!a]?
## aba bbb

##注意，如果需要匹配[字符，可以放在方括号内，比如[[aeiou]。如果需要匹配连字号-，只能放在方括号内部的开头或结尾，比如[-aeiou]或[aeiou-]。

#6.[start-end] 扩展
#方括号扩展有一个简写形式[start-end]，表示匹配一个连续的范围。比如，[a-c]等同于[abc]，[0-9]匹配[0123456789]。
# 存在文件 a.txt、b.txt 和 c.txt
# ls [a-c].txt
## a.txt
## b.txt
## c.txt

#下面是一些常用简写的例子。
# [a-z]：所有小写字母。
# [a-zA-Z]：所有小写字母与大写字母。
# [a-zA-Z0-9]：所有小写字母、大写字母与数字。
# [abc]*：所有以a、b、c字符之一开头的文件名。
# program.[co]：文件program.c与文件program.o。
# BACKUP.[0-9][0-9][0-9]：所有以BACKUP.开头，后面是三个数字的文件名。
# 这种简写形式有一个否定形式[!start-end]，表示匹配不属于这个范围的字符。比如，[!a-zA-Z]表示匹配非英文字母的字符。

#7.大括号扩展
#大括号扩展{...}表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，{1,2,3}扩展成1 2 3。
#echo Front-{A,B,C}-Back
##Front-A-Back Front-B-Back Front-C-Back

##注意，大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。
##另一个需要注意的地方是，大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。

#逗号前面可以没有值，表示扩展的第一项为空。
# cp a.log{,.bak}
# 等同于
# cp a.log a.log.bak

#大括号可以嵌套
#echo {j{p,pe}g,png}
##jpg jpeg png
#echo a{A{1,2},B{3,4}}b
##aA1b aA2b aB3b aB4b

#大括号也可以与其他模式联用，并且总是先于其他模式进行扩展。
#echo {cat,d*}
##cat dawg dg dig dog doug dug

##大括号可以用于多字符的模式，方括号不行（只能匹配单字符）。
##由于大括号扩展{...}不是文件名扩展，所以它总是会扩展的。这与方括号扩展[...]完全不同，如果匹配的文件不存在，方括号就不会扩展。这一点要注意区分。
# 不存在 a.txt 和 b.txt
# echo [ab].txt
## [ab].txt

# echo {a,b}.txt
## a.txt b.txt

#8.{start..end} 扩展
#大括号扩展有一个简写形式{start..end}，表示扩展成一个连续序列。比如，{a..z}可以扩展成26个小写英文字母。
#echo d{a..d}g
##dag dbg dcg ddg

#这种简写形式支持逆序
#echo {5..1}
##5 4 3 2 1

#这种简写形式可以嵌套使用，形成复杂的扩展。
#echo .{mp{3..4},m4{a,b,p,v}}
##.mp3 .mp4 .m4a .m4b .m4p .m4v

#大括号扩展的常见用途为新建一系列目录。
#新建36个子目录，每个子目录的名字都是”年份-月份“
#mkdir {2007..2009}-{01..12}

#这个写法的另一个常见用途，是直接用于for循环。
#for i in {1..4}
#do
#  echo $i
#done

#如果整数前面有前导0，扩展输出的每一项都有前导0。
# echo {01..5}
## 01 02 03 04 05

# echo {001..5}
## 001 002 003 004 005

#这种简写形式还可以使用第二个双点号（start..end..step），用来指定扩展的步长。
#echo {0..8..2}
##0 2 4 6 8

#多个简写形式连用，会有循环处理的效果
#echo {a..c}{1..3}
##a1 a2 a3 b1 b2 b3 c1 c2 c3

#9.变量扩展
#Bash 将美元符号$开头的词元视为变量，将其扩展成变量值
#echo #SHELL
#or
#echo ${SHELL}
##/bin/bash

#${!string*}或${!string@}返回所有匹配给定字符串string的变量名。
#${!S*}扩展成所有以S开头的变量名。
#echo ${!S*}
##SECONDS SHELL SHELLOPTS SHLVL SSH_AGENT_PID SSH_AUTH_SOCK

#10.子命令扩展
#$(...)可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。
#echo $(date)
#or old grammer
#echo `time`

##$(...)可以嵌套，比如$(ls $(pwd))。

#11.算术扩展
#$((...))可以扩展成整数运算的结果
#echo $((2+3))

#12.字符类
#[[:class:]]表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下:

#[[:alnum:]]：匹配任意英文字母与数字
#[[:alpha:]]：匹配任意英文字母
#[[:blank:]]：空格和 Tab 键。
#[[:cntrl:]]：ASCII 码 0-31 的不可打印字符。
#[[:digit:]]：匹配任意数字 0-9。
#[[:graph:]]：A-Z、a-z、0-9 和标点符号。
#[[:lower:]]：匹配任意小写字母 a-z。
#[[:print:]]：ASCII 码 32-127 的可打印字符。
#[[:punct:]]：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。
#[[:space:]]：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。
#[[:upper:]]：匹配任意大写字母 A-Z。
#[[:xdigit:]]：16进制字符（A-F、a-f、0-9）。

#输出所有大写字母开头的文件名。
#echo [[:upper:]]*

#字符类的第一个方括号后面，可以加上感叹号!，表示否定。比如，[![:digit:]]匹配所有非数字
#输出所有不以数字开头的文件名
#echo ![[:digit:]]*

##字符类也属于文件名扩展，如果没有匹配的文件名，字符类就会原样输出。

#13.使用注意点
#（1）通配符是先解释，再执行。
#（2）文件名扩展在不匹配时，会原样输出。
#（3）只适用于单层路径。
##如果要匹配子目录里面的文件，可以写成下面这样。
##ls */*.txt
##or
##ls **/*.txt
#（4）文件名可以使用通配符。
##创建了一个fo*文件，这时*就是文件名的一部分。
##touch 'fo*'

#14.量词语法
#量词语法用来控制模式匹配的次数。它只有在 Bash 的extglob参数打开的情况下才能使用，不过一般是默认打开的。下面的命令可以查询。
#shopt extglob
##extglob        	on

##量词语法有下面几个。
##?(pattern-list)：匹配零个或一个模式。
##*(pattern-list)：匹配零个或多个模式。
##+(pattern-list)：匹配一个或多个模式。
##@(pattern-list)：只匹配一个模式。
##!(pattern-list)：匹配零个或一个以上的模式，但不匹配单独一个的模式。

###详情：https://wangdoc.com/bash/expansion.html#%E9%87%8F%E8%AF%8D%E8%AF%AD%E6%B3%95

#15.shopt 命令
#shopt 命令可以设置 shell 的可选参数.
#shopt [-psu] [optname ...]
#-s 开启莫格选项
#-u 关闭某个选项
#-p 列出所有选项的当前生效命令.(不带-p表示列出所有选项的当前状态)

#（1）dotglob 参数
#dotglob参数可以让扩展结果包括隐藏文件（即点开头的文件）。
#打开dotglob，就会包括隐藏文件。
#shopt -s dotglob
# ls *
##abc.txt .config

#（2）nullglob 参数
#nullglob参数可以让通配符不匹配任何文件名时，返回空字符。

#（3）failglob 参数
#failglob参数使得通配符不匹配任何文件名时，Bash 会直接报错，而不是让各个命令去处理。

#（4）extglob 参数
#extglob参数使得 Bash 支持 ksh 的一些扩展语法。它默认应该是打开的。

#（5）nocaseglob 参数
#nocaseglob参数可以让通配符扩展不区分大小写。

#shopt -s nocaseglob
# ls /windows/program*
##/windows/ProgramData
##/windows/Program Files
##/windows/Program Files (x86)

#（6）globstar 参数
#globstar参数可以使得**匹配零个或多个子目录。该参数默认是关闭的。

